#! /usr/bin/bash
set -eo pipefail

fail () {
    printf "%s\n" "$1" >&2
    exit "${2-1}"
}

CONFIG_FILE=~/.config/lkr/config.json

generate_config () {
    [ ! -e ~/.config/lkr/config.json ] || fail "Will not overwrite ~/.config/lkr/config.json"
    [ -e ~/.config ] || fail "Could not find ~/.config directory"
    [ -e ~/.config/lkr ] || mkdir ~/.config/lkr
    # https://stackoverflow.com/questions/38860529/create-json-using-jq-from-pipe-separated-keys-and-values-in-bash
    s='PUBLIC_KEY|PRIVATE_KEY_ENCRYPTED|RBW_PRIVATE_KEY_ENTRY|LOCKED_EXTENSION|UNLOCKED_EXTENSION
/path/to/public/key|/path/to/encrypted/private/key.age|lkr_key|locked|private'
    jq -Rn '
    ( input  | split("|") ) as $keys |
    ( inputs | split("|") ) as $vals |
    [[$keys, $vals] | transpose[] | {key:.[0],value:.[1]}] | from_entries
    ' <<<"$s" >> ~/.config/lkr/config.json
    echo "wrote to ~/.config/lkr/config.json"
}

case "$1" in
    generate-config)
        generate_config
        exit 0
esac

if [ ! -e $CONFIG_FILE ] 
    then
    fail "No config.json file found in $CONFIG_FILE, run lkr generate-config"
fi

PUBLIC_KEY=$(cat $CONFIG_FILE | jq -r .PUBLIC_KEY)
PRIVATE_KEY_ENCRYPTED=$(cat $CONFIG_FILE | jq -r .PRIVATE_KEY_ENCRYPTED)
RBW_PRIVATE_KEY_ENTRY=$(cat $CONFIG_FILE | jq -r .RBW_PRIVATE_KEY_ENTRY)
LOCKED_EXTENSION=$(cat $CONFIG_FILE | jq -r .LOCKED_EXTENSION)
UNLOCKED_EXTENSION=$(cat $CONFIG_FILE | jq -r .UNLOCKED_EXTENSION)


check_internet () {
    wget -q --spider https://google.com
    error_code=$?
    if [ $error_code -eq 4 ]; 
    then
        return 1
    else
        return 0    
    fi
}

check_rbw_agent () {
    pgrep rbw-agent > /dev/null
    return $?
}

get_private_key () {
    if check_internet || check_rbw_agent;
    then
        rbw get $RBW_PRIVATE_KEY_ENTRY
    else
        echo "Could not connect to internet" >&2
        echo "Using local key" >&2
        age -d $PRIVATE_KEY_ENCRYPTED
    fi
}

lock () {
    # [ -d "$1" ] || fail "Error: $1 is not a directory"
    fullpath=$(realpath "$1")
    filedir=$(dirname "$fullpath")
    filename=$(basename -- "$fullpath")
    extension="${filename##*.}"
    [ "$extension" == "$UNLOCKED_EXTENSION" ] || fail "File/Directory must have .${UNLOCKED_EXTENSION} suffix"
    filename="${filename%.*}"
    tar cP "$fullpath" | age -R $PUBLIC_KEY -e >> "${filedir}/${filename}.${LOCKED_EXTENSION}"
    rm -rf "$1"
}

unlock () {
    fullpath=$(realpath "$1")
    filename=$(basename -- "$1")
    extension="${filename##*.}"
    filename="${filename%.*}"
    [ "$extension" == $LOCKED_EXTENSION ] || fail "Please pass in .${LOCKED_EXTENSION} extension file"

    age -d -i <(get_private_key) "$fullpath" | tar xP
    rm -f "$1"
}

main () {
    POSITIONAL_ARGS=()

    while [[ $# -gt 0 ]]; do
      case $1 in
        -*|--*)
          echo "Unknown option $1"
          exit 1
          ;;
        *)
          POSITIONAL_ARGS+=("$1") # save positional arg
          shift # past argument
          ;;
      esac
    done

    set -- "${POSITIONAL_ARGS[@]}" # restore positional parameters

    case "$1" in
        lock-all)
            unlocked_files=($(echo $(fd -uu -e "$UNLOCKED_EXTENSION" . "$HOME")))
            for f in "${unlocked_files[@]}"; do
                lock "$f"
            done
            exit 0
            ;;
    esac

    [ $# -eq 2 ] || fail "Usage: lkr [lock/unlock] [ARG]"
    case "$1" in
        l|lock)
            [[ -e "$2" ]] || fail "$2 does not exist"
            lock "$2"
            ;;
        u|unlock)
            [[ -e "$2" ]] || fail "$2 does not exist"
            unlock "$2"
            ;;
        *)
            fail "Usage: lkr [lock/unlock] [ARG]"
            ;;
    esac
}

main "$@"
